xyplot(temp~day,data=out, type="l")
xyplot(temp~day,data=out, type="l",scales=list(x=list(at=as.Date(xt), label=strftime(xt, format="%M-%d"))))
xyplot(temp~day,data=out, type="l",scales=list(x=list(at=as.Date(xt), label=strftime(xt, format="%m-%d"))))
xt<-seq(min(out$day),max(out$day),by="month")
xyplot(temp~day,data=out, type="l",scales=list(x=list(at=as.Date(xt), label=strftime(xt, format="%m-%d"))))
xyplot(temp~day,data=out, type="l",scales=list(x=list(at=as.Date(xt), label=strftime(xt, format="mmm"))))
xyplot(temp~day,data=out, type="l",scales=list(x=list(at=as.Date(xt), label=strftime(xt, format="mm"))))
xyplot(temp~day,data=out, type="l",scales=list(x=list(at=as.Date(xt), label=strftime(xt, format="%mm"))))
xyplot(temp~day,data=out, type="l",scales=list(x=list(at=as.Date(xt), label=strftime(xt, format="%M"))))
xyplot(temp~day,data=out, type="l",scales=list(x=list(at=xt, label=strftime(xt, format="%M"))))
xyplot(temp~day,data=out, type="l",scales=list(x=list(at=xt, label=strftime(xt, format="%m"))))
xtm<-seq(min(out$day),max(out$day),by="month")
xtw<-seq(min(out$day),max(out$day),by="week")
xyplot(temp~day,data=out, type="l",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%Y-%m-%d"))))
xyplot(temp~day,data=out, type="l",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%Y-%m-%d")), y="free",rot=0))
xyplot(temp~day,data=out, type="l",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%Y-%m-%d")), y="free",rot=45))
xyplot(temp~day,data=out, type="l",
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%Y-%m-%d")), y="free",rot=45),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
my.strip <- function(which.given, which.panel, ...) {
strip.labels <- c(as.expression(expression(paste("Mean temperature (", degree*C, ")"))))
panel.rect(0, 0, 1, 1, col="#ffe5cc", border=1)
panel.text(x=0.5, y=0.5, adj=c(0.5, 0.55), cex=0.95,
lab=strip.labels[which.panel[which.given]])
}
col.raw <- "#377EB8"  #colset[2] } see note above
col.smo <- "#E41A1C"  #colset[1] }
col.lm <- "grey20"
xyplot(temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%Y-%m-%d")), y="free",rot=45),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%m-%j")), y="free",rot=45),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
?strftime
xyplot(temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%B-%j")), y="free",rot=45),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%B-%Y")), y="free",rot=45),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%j-%Y")), y="free",rot=45),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y")), y="free",rot=45),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y")), y="free",rot=list(x=45,y=0)),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y")), y="free",rot=c(x=45,y=0)),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y")), y="free",rot=c(0,45)),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y="free"),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y=list("free",rot=0)),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp+rh~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y=list("free",rot=0)),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
my.strip <- function(which.given, which.panel, ...) {
strip.labels <- c(as.expression(expression(paste("Mean temperature (", degree*C, ")"))),
"Relative Humidity (%)")
panel.rect(0, 0, 1, 1, col="#ffe5cc", border=1)
panel.text(x=0.5, y=0.5, adj=c(0.5, 0.55), cex=0.95,
lab=strip.labels[which.panel[which.given]])
}
xyplot(temp+rh~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
layout=c(2,1),
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y=list("free",rot=0)),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp+rh~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
layout=c(2,1),
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y="free",rot=0),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp+rh~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
layout=c(1,2),
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y="free",rot=0),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(temp+rh+rain~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
layout=c(1,3),
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y="free",rot=0),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(rh+temp+rain~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
layout=c(1,3),
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y="free",rot=0),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(rain+rh+temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
layout=c(1,3),
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y="free",rot=0),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
my.strip <- function(which.given, which.panel, ...) {
strip.labels <- c("Rainfall (mm/day)",
"Relative Humidity (%)",
as.expression(expression(paste("Mean temperature (", degree*C, ")")))
)
panel.rect(0, 0, 1, 1, col="#ffe5cc", border=1)
panel.text(x=0.5, y=0.5, adj=c(0.5, 0.55), cex=0.95,
lab=strip.labels[which.panel[which.given]])
}
xyplot(rain+rh+temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
layout=c(1,3),
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y="free",rot=0),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(rh+temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
layout=c(1,3),
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y="free",rot=0),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(rain+rh+temp~day,data=out, type="l",
strip=my.strip,
outer=TRUE, ylab="",
layout=c(1,3),
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y="free",rot=0),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2)
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
xyplot(rain+rh+temp~day,data=out,
strip=my.strip,
outer=TRUE, ylab="",
layout=c(1,3),
scales=list(x=list(at=xtw, label=strftime(xtw, format="%U-%Y"), rot=45), y="free",rot=0),
panel = function(x, y, ...) {
panel.abline(v=as.Date(xtm), col = "grey80", lwd=3, lty = 3)
panel.xyplot(x,y, ..., col=col.raw, lwd=2, type="l")
panel.loess(x, y, ..., col=col.smo, span=0.15, lwd=2) # smoothed data
panel.abline(h=median(y, na.rm=TRUE), lty=2, col=col.lm, lwd=2) # median value
})
?panel.number
fix(xt)
library(forecast)
fit <- bats(USAccDeaths, use.parallel=FALSE)
fit
plot(forecast(fit))
taylor.fit <- bats(taylor)
plot(forecast(fit))
f1 <- ets(WWWusage)
f2 <- auto.arima(WWWusage)
accuracy(f1)
accuracy(f2)
dm.test(residuals(f1),residuals(f2),h=1)
fcast <- dshw(taylor)
USAccDeaths
fit <- ets(USAccDeaths)
plot(forecast(fit))
library(fpp)
plot(melsyd[,"Economy.Class"],
main="Economy class passengers: Melbourne-Sydney",
xlab="Year",ylab="Thousands")
plot(a10, ylab="$ million", xlab="Year", main="Antidiabetic drug sales")
seasonplot(a10,ylab="$ million", xlab="Year",
main="Seasonal plot: antidiabetic drug sales",
year.labels=TRUE, year.labels.left=TRUE, col=1:20, pch=19)
data(a10)
a10
rm(f1,f2,fit)
monthplot(a10,ylab="$ million",xlab="Month",xaxt="n",
main="Seasonal deviation plot: antidiabetic drug sales")
axis(1,at=1:12,labels=month.abb,cex=0.8)
plot(jitter(fuel[,5]), jitter(fuel[,8]), xlab="City mpg", ylab="Carbon footprint")
pairs(fuel[,-c(1:2,4,7)], pch=19)
beer2 <- window(ausbeer, start=1992, end=2006-.1)
plot(beer2)
seasonplot(beer2)
seasonplot(beer2,year.labels=TRUE, year.labels.left=TRUE)
seasonplot(beer2,year.labels=TRUE, year.labels.left=TRUE,col=1:14)
monthplot(beer2)
lag.plot(beer2, lags=9, do.lines=FALSE)
Acf(beer2)
beerfit1 <- meanf(beer2, h=11)
beerfit2 <- naive(beer2, h=11)
beerfit3 <- snaive(beer2, h=11)
plot(beerfit1, plot.conf=FALSE,
main="Forecasts for quarterly beer production")
lines(beerfit2$mean,col=2)
lines(beerfit3$mean,col=3)
legend("topright",lty=1,col=c(4,2,3),
legend=c("Mean method","Naive method","Seasonal naive method"))
plot(log(elec), ylab="Transformed electricity demand",
xlab="Year", main="Transformed monthly electricity demand")
title(main="Log",line=-1)
lambda <- BoxCox.lambda(elec) # = 0.27
plot(BoxCox(elec,lambda))
lines(log(elec), col=2)
plot(elec)
lines(log(elec), col=2)
plot(elec)
plot(log(elec), col=2, add=TRUE)
plot(elec,more=TRUE)
plot(log(elec), col=2)
plot(BoxCox(elec,lambda))
beer3 <- window(ausbeer, start=2006)
accuracy(beerfit1, beer3)
accuracy(beerfit2, beer3)
accuracy(beerfit3, beer3)
dj2 <- window(dj, end=250)
plot(dj2, main="Dow Jones Index (daily ending 15 Jul 94)",
ylab="", xlab="Day")
res <- residuals(naive(dj2))
plot(res, main="Residuals from naive method",
ylab="", xlab="Day")
Acf(res, main="ACF of residuals")
hist(res, nclass="FD", main="Histogram of residuals")
Box.test(res, lag=10, fitdf=0)
Box.test(res,lag=10, fitdf=0, type="Lj")
forecast(beer)
fit <- stl(elecequip, s.window=5)
plot(elecequip, col="gray",
main="Electrical equipment manufacturing",
ylab="New orders index", xlab="")
lines(fit$time.series[,2],col="red",ylab="Trend")
plot(fit)
monthplot(fit$time.series[,"seasonal"], main="", ylab="Seasonal")
plot(elecequip, col="grey",
main="Electrical equipment manufacturing",
xlab="", ylab="New orders index")
lines(seasadj(fit),col="red",ylab="Seasonally adjusted")
fit <- stl(elecequip, t.window=15, s.window="periodic", robust=TRUE)
eeadj <- seasadj(fit)
plot(naive(eeadj), xlab="New orders index",
main="Naive forecasts of seasonally adjusted data")
fcast <- forecast(fit, method="naive")
plot(fcast, ylab="New orders index")
q()
ibrary(GeneticsPed)
library(RJSONIO)
con <- getpgcon(dbname="wheatdb",user="nicolau",pwd=Sys.getenv("R_DBUSER"))
lsdb(con)
geno <- dbGetQuery(con, "SELECT id, cross_history, cross_history_data, name FROM genotype")
as.data.frame(fromJSON(geno$cross_history_data[53]))
tmp53 <- data.frame(id=c("S1","BRS Guamirim"), mother=c("Embrapa 27", "S1"),father=c("BUCK NANDU","PF 93159"))
(p.tmp53 <- Pedigree(tmp53, subject="id", ascendant=c("father", "mother")))
# inbreeding(p.tmp53)
fractions(relationshipAdditive(p.tmp53))
library(GeneticsPed)
library(RJSONIO)
con <- getpgcon(dbname="wheatdb",user="nicolau",pwd=Sys.getenv("R_DBUSER"))
lsdb(con)
geno <- dbGetQuery(con, "SELECT id, cross_history, cross_history_data, name FROM genotype")
as.data.frame(fromJSON(geno$cross_history_data[53]))
tmp53 <- data.frame(id=c("S1","BRS Guamirim"), mother=c("Embrapa 27", "S1"),father=c("BUCK NANDU","PF 93159"))
(p.tmp53 <- Pedigree(tmp53, subject="id", ascendant=c("father", "mother")))
kinship(p.tmp53)
(p.tmp53 <- Pedigree(tmp53, subject="id", ascendant=c("father", "mother"),ascendantLevel=c(1,1,1)))
as.data.frame(fromJSON(geno$cross_history_data[53]))
as.data.frame(fromJSON(geno$cross_history_data[50:53]))
as.data.frame(fromJSON(geno$cross_history_data[53]))
as.data.frame(fromJSON(geno$cross_history_data[52]))
as.data.frame(fromJSON(geno$cross_history_data[51]))
geno$cross_history_data
geno$cross_history_data[!is.na(geno$cross_history_data)]
fromJSON(geno$cross_history_data[!is.na(geno$cross_history_data)])
lapply(geno$cross_history_data[!is.na(geno$cross_history_data)], fromJSON)
sapply(geno$cross_history_data[!is.na(geno$cross_history_data)], fromJSON)
as.data.frame(sapply(geno$cross_history_data[!is.na(geno$cross_history_data)], fromJSON))
as.data.frame(lapply(geno$cross_history_data[!is.na(geno$cross_history_data)], fromJSON))
lapply(geno$cross_history_data[!is.na(geno$cross_history_data)], fromJSON)
sapply(lapply(geno$cross_history_data[!is.na(geno$cross_history_data)], fromJSON), as.data.frame)
lapply(lapply(geno$cross_history_data[!is.na(geno$cross_history_data)], fromJSON), as.data.frame)
do.call("rbind",lapply(lapply(geno$cross_history_data[!is.na(geno$cross_history_data)], fromJSON), as.data.frame))
sapply(lapply(geno$cross_history_data[!is.na(geno$cross_history_data)], fromJSON), as.data.frame)
pall.tmp<-sapply(lapply(geno$cross_history_data[!is.na(geno$cross_history_data)], fromJSON), as.data.frame)
lapply(pall.tmp, names)
lapply(lapply(pall.tmp, names), function(x) gsub("crossHistory\.","", x))
lapply(lapply(pall.tmp, names), function(x) gsub("crossHistory\.","", x, perl=TRUE))
lapply(lapply(pall.tmp, names), function(x) gsub("crossHistory\\.","", x, perl=TRUE))
sapply(lapply(lapply(pall.tmp, names), function(x) gsub("crossHistory\\.","", x, perl=TRUE)), length)
sapply(lapply(lapply(pall.tmp, names), function(x) gsub("crossHistory\\.","", x, perl=TRUE)), length) == 3
id1 <- sapply(lapply(lapply(pall.tmp, names), function(x) gsub("crossHistory\\.","", x, perl=TRUE)), length) == 3
pall.tmp[id1]
do.call("rbind",pall.tmp[id1])
tmp.id1<- do.call("rbind",pall.tmp[id1])
names(tmp.id1) <- gsub("crossHistory\\.","", names(tmp.id1), perl=TRUE)
tmp.id1
seq_along(nrow(tmp.id1))
seq_len(nrow(tmp.id1))
row.names(tmp.id1) <- seq_len(nrow(tmp.id1))
tmp.id1
p.tmp.id1 <- Pedigree(tmp.id1, subject="genotype", ascendant=c("father", "mother"))
check(p.tmp.id1)
GeneticsPed:::ascendantEqualAscendant(p.tmp.id1)
GeneticsPed:::ascendantInAscendant(p.tmp.id1)
plot(p.tmp.id1)
relationshipAdditive(p.tmp.id1)
fractions(relationshipAdditive(p.tmp.id1))
kinship(p.tmp.id1)
solve(relationshipAdditive(p.tmp.id1))
inverseAdditive(p.tmp.id1)
inbreeding(p.tmp.id1)
grep("ped",available.packages()[,"Package"])
grep("ped",available.packages()[,"Package"],value=TRUE)
grep("[Pp]ed",available.packages()[,"Package"],value=TRUE)
search()
RStudioGD:::version()
ls("tools:rstudio")
library(XML)
url <- "http://www.gdacs.org/Cyclones/report.aspx?eventid=41058&episodeid=28&eventtype=TC"
dat <- readHTMLTable(readLines(url), which=5)
dat$latlon <- dat[,8]
levels(dat$latlon) <- sapply(
strsplit(levels(dat[,8]), ",\n        "),
function(x) paste(x[2], x[1], sep=":")
)
dat$Category <- factor(dat$Category, levels=levels(dat$Category)[c(6,7,1:5)],
ordered=TRUE)
dat$cat <- as.numeric(dat$Category)
dat$Gust_kmh <- dat[,6]
levels(dat$Gust_kmh) <- sapply(strsplit(levels(dat[,6]), "km"),
function(x) gsub(" ", "",x[1]))
dat$Gust_kmh <- as.numeric(as.character(dat$Gust_kmh))
library(googleVis)
M <- gvisGeoChart(dat, "latlon", sizevar="cat",
colorvar="Gust_kmh",
options=list(region='035',
backgroundColor="lightblue",
datalessRegionColor="grey"))
plot(M)
library(swirlify)
course = system.file('Courses', 'Data_Analysis', package = 'swirl')
module = 'Module1.Rda'
deck = swirl2slidify(course, module)
library(slidify)
setwd("~/Analysis/EmAnalise/courses/DataAnalysis")
author('module1')
cat(deck, file = "index.Rmd")
runDeck()
dir(course)
dir(system.file("Courses", package='swirl'))
dir(system.file("Courses", 'Open_Intro', package='swirl'))
course0 <- system.file("Courses", 'Open_Intro', package='swirl')
deck = swirl2slidify(course0, module)
author('module0')
cat(deck, file = "index.Rmd")
runDeck()
course = system.file('Courses', 'Data_Analysis', package = 'swirl')
setwd("~/Analysis/EmAnalise/courses")
deck = swirl2slidify(course, module)
author('module2')
cat(deck, file = "index.Rmd")
runDeck()
module = 'Module2.Rda'
deck = swirl2slidify(course, module)
cat(deck, file = "index.Rmd")
runDeck()
module = 'Module3.Rda'
deck = swirl2slidify(course, module)
author('module3')
cat(deck, file = "index.Rmd")
runDeck()
library(slidify)
setwd("~/Analysis/EmAnalise/courses")
setwd("~/Analysis/EmAnalise/courses/EmbrapaTrigo")
author('module0')
slidify('index.Rmd')
runDeck()
publish('classes','marcionicolau', host='github')
